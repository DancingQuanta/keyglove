// Keyglove controller source code - KGAPI "system" protocol command parser
// 2014-11-03 by Jeff Rowberg <jeff@rowberg.net>
// Updates should (hopefully) always be available at https://github.com/jrowberg/keyglove

/* ============================================
Controller code is placed under the MIT license
Copyright (c) 2014 Jeff Rowberg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
===============================================
*/

/**
 * @file support_protocol_system.h
 * @brief KGAPI "system" protocol command parser
 * @author Jeff Rowberg
 * @date 2014-11-03
 *
 * This file implements subsystem-specific command processing functions for the
 * "system" part of the KGAPI protocol.
 *
 * Normally it is not necessary to edit this file. (It is also autogenerated.)
 */

#ifndef _SUPPORT_PROTOCOL_SYSTEM_H_
#define _SUPPORT_PROTOCOL_SYSTEM_H_

/* =========================== */
/* KGAPI CONSTANT DECLARATIONS */
/* =========================== */

#define KG_PACKET_ID_CMD_SYSTEM_PING                        0x01
#define KG_PACKET_ID_CMD_SYSTEM_RESET                       0x02
#define KG_PACKET_ID_CMD_SYSTEM_GET_INFO                    0x03
#define KG_PACKET_ID_CMD_SYSTEM_GET_MEMORY                  0x04
#define KG_PACKET_ID_CMD_SYSTEM_SET_TIMER                   0x05
#define KG_PACKET_ID_CMD_SYSTEM_GET_BATTERY_STATUS          0x06
// -- command/event split --
#define KG_PACKET_ID_EVT_SYSTEM_BOOT                        0x01
#define KG_PACKET_ID_EVT_SYSTEM_READY                       0x02
#define KG_PACKET_ID_EVT_SYSTEM_ERROR                       0x03
#define KG_PACKET_ID_EVT_SYSTEM_TIMER_TICK                  0x04
#define KG_PACKET_ID_EVT_SYSTEM_BATTERY_STATUS              0x05

/* ================================ */
/* KGAPI COMMAND/EVENT DECLARATIONS */
/* ================================ */

/* 0x01 */ uint16_t kg_cmd_system_ping(uint32_t *runtime);
/* 0x02 */ uint16_t kg_cmd_system_reset(uint8_t type);
/* 0x03 */ uint16_t kg_cmd_system_get_info(uint8_t *major, uint8_t *minor, uint8_t *patch, uint32_t *timestamp);
/* 0x04 */ uint16_t kg_cmd_system_get_memory(uint32_t *free_ram, uint32_t *total_ram);
/* 0x05 */ uint16_t kg_cmd_system_set_timer(uint8_t handle, uint16_t interval, uint8_t oneshot);
/* 0x06 */ uint16_t kg_cmd_system_get_battery_status(uint8_t *status, uint8_t *level);
// -- command/event split --
/* 0x01 */ extern uint8_t (*kg_evt_system_boot)(uint8_t major, uint8_t minor, uint8_t patch, uint32_t timestamp);
/* 0x02 */ extern uint8_t (*kg_evt_system_ready)();
/* 0x03 */ extern uint8_t (*kg_evt_system_error)(uint16_t code);
/* 0x04 */ extern uint8_t (*kg_evt_system_timer_tick)(uint8_t handle, uint32_t seconds, uint8_t subticks);
/* 0x05 */ extern uint8_t (*kg_evt_system_battery_status)(uint8_t status, uint8_t level);

#define KG_SYSTEM_RESET_TYPE_NORMAL                         0x01
#define KG_SYSTEM_RESET_TYPE_KGONLY                         0x02

uint8_t process_protocol_command_system(uint8_t *rxPacket);

#endif // _SUPPORT_PROTOCOL_SYSTEM_H_
